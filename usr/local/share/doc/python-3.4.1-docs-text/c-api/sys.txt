
Operating System Utilities
**************************

int Py_FdIsInteractive(FILE *fp, const char *filename)

   Return true (nonzero) if the standard I/O file *fp* with name
   *filename* is deemed interactive.  This is the case for files for
   which "isatty(fileno(fp))" is true.  If the global flag
   "Py_InteractiveFlag" is true, this function also returns true if
   the *filename* pointer is *NULL* or if the name is equal to one of
   the strings "'<stdin>'" or "'???'".

void PyOS_AfterFork()

   Function to update some internal state after a process fork; this
   should be called in the new process if the Python interpreter will
   continue to be used. If a new executable is loaded into the new
   process, this function does not need to be called.

int PyOS_CheckStack()

   Return true when the interpreter runs out of stack space.  This is
   a reliable check, but is only available when "USE_STACKCHECK" is
   defined (currently on Windows using the Microsoft Visual C++
   compiler).  "USE_STACKCHECK" will be defined automatically; you
   should never change the definition in your own code.

PyOS_sighandler_t PyOS_getsig(int i)

   Return the current signal handler for signal *i*.  This is a thin
   wrapper around either "sigaction()" or "signal()".  Do not call
   those functions directly! "PyOS_sighandler_t" is a typedef alias
   for "void (*)(int)".

PyOS_sighandler_t PyOS_setsig(int i, PyOS_sighandler_t h)

   Set the signal handler for signal *i* to be *h*; return the old
   signal handler. This is a thin wrapper around either "sigaction()"
   or "signal()".  Do not call those functions directly!
   "PyOS_sighandler_t" is a typedef alias for "void (*)(int)".


System Functions
****************

These are utility functions that make functionality from the "sys"
module accessible to C code.  They all work with the current
interpreter thread's "sys" module's dict, which is contained in the
internal thread state structure.

PyObject *PySys_GetObject(char *name)
    *Return value: Borrowed reference.*

   Return the object *name* from the "sys" module or *NULL* if it does
   not exist, without setting an exception.

int PySys_SetObject(char *name, PyObject *v)

   Set *name* in the "sys" module to *v* unless *v* is *NULL*, in
   which case *name* is deleted from the sys module. Returns "0" on
   success, "-1" on error.

void PySys_ResetWarnOptions()

   Reset "sys.warnoptions" to an empty list.

void PySys_AddWarnOption(wchar_t *s)

   Append *s* to "sys.warnoptions".

void PySys_AddWarnOptionUnicode(PyObject *unicode)

   Append *unicode* to "sys.warnoptions".

void PySys_SetPath(wchar_t *path)

   Set "sys.path" to a list object of paths found in *path* which
   should be a list of paths separated with the platform's search path
   delimiter (":" on Unix, ";" on Windows).

void PySys_WriteStdout(const char *format, ...)

   Write the output string described by *format* to "sys.stdout".  No
   exceptions are raised, even if truncation occurs (see below).

   *format* should limit the total size of the formatted output string
   to 1000 bytes or less -- after 1000 bytes, the output string is
   truncated. In particular, this means that no unrestricted "%s"
   formats should occur; these should be limited using "%.<N>s" where
   <N> is a decimal number calculated so that <N> plus the maximum
   size of other formatted text does not exceed 1000 bytes.  Also
   watch out for "%f", which can print hundreds of digits for very
   large numbers.

   If a problem occurs, or "sys.stdout" is unset, the formatted
   message is written to the real (C level) *stdout*.

void PySys_WriteStderr(const char *format, ...)

   As "PySys_WriteStdout()", but write to "sys.stderr" or *stderr*
   instead.

void PySys_FormatStdout(const char *format, ...)

   Function similar to PySys_WriteStdout() but format the message
   using "PyUnicode_FromFormatV()" and don't truncate the message to
   an arbitrary length.

   New in version 3.2.

void PySys_FormatStderr(const char *format, ...)

   As "PySys_FormatStdout()", but write to "sys.stderr" or *stderr*
   instead.

   New in version 3.2.

void PySys_AddXOption(const wchar_t *s)

   Parse *s* as a set of *-X* options and add them to the current
   options mapping as returned by "PySys_GetXOptions()".

   New in version 3.2.

PyObject *PySys_GetXOptions()
    *Return value: Borrowed reference.*

   Return the current dictionary of *-X* options, similarly to
   "sys._xoptions".  On error, *NULL* is returned and an exception is
   set.

   New in version 3.2.


Process Control
***************

void Py_FatalError(const char *message)

   Print a fatal error message and kill the process.  No cleanup is
   performed. This function should only be invoked when a condition is
   detected that would make it dangerous to continue using the Python
   interpreter; e.g., when the object administration appears to be
   corrupted.  On Unix, the standard C library function "abort()" is
   called which will attempt to produce a "core" file.

void Py_Exit(int status)

   Exit the current process.  This calls "Py_Finalize()" and then
   calls the standard C library function "exit(status)".

int Py_AtExit(void (*func) ())

   Register a cleanup function to be called by "Py_Finalize()".  The
   cleanup function will be called with no arguments and should return
   no value.  At most 32 cleanup functions can be registered.  When
   the registration is successful, "Py_AtExit()" returns "0"; on
   failure, it returns "-1".  The cleanup function registered last is
   called first. Each cleanup function will be called at most once.
   Since Python's internal finalization will have completed before the
   cleanup function, no Python APIs should be called by *func*.
