
Synchronization primitives
**************************


Locks
=====


Lock
----

class class asyncio.Lock(*, loop=None)

   Primitive lock objects.

   A primitive lock is a synchronization primitive that is not owned
   by a particular coroutine when locked.  A primitive lock is in one
   of two states, 'locked' or 'unlocked'.

   It is created in the unlocked state.  It has two basic methods,
   "acquire()" and "release()".  When the state is unlocked, acquire()
   changes the state to locked and returns immediately.  When the
   state is locked, acquire() blocks until a call to release() in
   another coroutine changes it to unlocked, then the acquire() call
   resets it to locked and returns.  The release() method should only
   be called in the locked state; it changes the state to unlocked and
   returns immediately.  If an attempt is made to release an unlocked
   lock, a "RuntimeError" will be raised.

   When more than one coroutine is blocked in acquire() waiting for
   the state to turn to unlocked, only one coroutine proceeds when a
   release() call resets the state to unlocked; first coroutine which
   is blocked in acquire() is being processed.

   "acquire()" is a coroutine and should be called with "yield from".

   Locks also support the context manager protocol.  "(yield from
   lock)" should be used as context manager expression.

   Usage:

      lock = Lock()
      ...
      yield from lock
      try:
          ...
      finally:
          lock.release()

   Context manager usage:

      lock = Lock()
      ...
      with (yield from lock):
           ...

   Lock objects can be tested for locking state:

      if not lock.locked():
         yield from lock
      else:
         # lock is acquired
          ...

   locked()

      Return "True" if the lock is acquired.

   acquire()

      Acquire a lock.

      This method blocks until the lock is unlocked, then sets it to
      locked and returns "True".

      This method is a *coroutine*.

   release()

      Release a lock.

      When the lock is locked, reset it to unlocked, and return.  If
      any other coroutines are blocked waiting for the lock to become
      unlocked, allow exactly one of them to proceed.

      When invoked on an unlocked lock, a "RuntimeError" is raised.

      There is no return value.


Event
-----

class class asyncio.Event(*, loop=None)

   An Event implementation, asynchronous equivalent to
   "threading.Event".

   Class implementing event objects. An event manages a flag that can
   be set to true with the "set()" method and reset to false with the
   "clear()" method.  The "wait()" method blocks until the flag is
   true. The flag is initially false.

   clear()

      Reset the internal flag to false. Subsequently, coroutines
      calling "wait()" will block until "set()" is called to set the
      internal flag to true again.

   is_set()

      Return "True" if and only if the internal flag is true.

   set()

      Set the internal flag to true. All coroutines waiting for it to
      become true are awakened. Coroutine that call "wait()" once the
      flag is true will not block at all.

   wait()

      Block until the internal flag is true.

      If the internal flag is true on entry, return "True"
      immediately. Otherwise, block until another coroutine calls
      "set()" to set the flag to true, then return "True".

      This method is a *coroutine*.


Condition
---------

class class asyncio.Condition(*, loop=None)

   A Condition implementation, asynchronous equivalent to
   "threading.Condition".

   This class implements condition variable objects. A condition
   variable allows one or more coroutines to wait until they are
   notified by another coroutine.

   A new "Lock" object is created and used as the underlying lock.

   acquire()

      Acquire the underlying lock.

      This method blocks until the lock is unlocked, then sets it to
      locked and returns "True".

      This method is a *coroutine*.

   notify(n=1)

      By default, wake up one coroutine waiting on this condition, if
      any. If the calling coroutine has not acquired the lock when
      this method is called, a "RuntimeError" is raised.

      This method wakes up at most *n* of the coroutines waiting for
      the condition variable; it is a no-op if no coroutines are
      waiting.

      Note: An awakened coroutine does not actually return from its
        "wait()" call until it can reacquire the lock. Since
        "notify()" does not release the lock, its caller should.

   locked()

      Return "True" if the underlying lock is acquired.

   notify_all()

      Wake up all threads waiting on this condition. This method acts
      like "notify()", but wakes up all waiting threads instead of
      one. If the calling thread has not acquired the lock when this
      method is called, a "RuntimeError" is raised.

   release()

      Release the underlying lock.

      When the lock is locked, reset it to unlocked, and return. If
      any other coroutines are blocked waiting for the lock to become
      unlocked, allow exactly one of them to proceed.

      When invoked on an unlocked lock, a "RuntimeError" is raised.

      There is no return value.

   wait()

      Wait until notified.

      If the calling coroutine has not acquired the lock when this
      method is called, a "RuntimeError" is raised.

      This method releases the underlying lock, and then blocks until
      it is awakened by a "notify()" or "notify_all()" call for the
      same condition variable in another coroutine.  Once awakened, it
      re-acquires the lock and returns "True".

      This method is a *coroutine*.

   wait_for(predicate)

      Wait until a predicate becomes true.

      The predicate should be a callable which result will be
      interpreted as a boolean value. The final predicate value is the
      return value.

      This method is a *coroutine*.


Semaphores
==========


Semaphore
---------

class class asyncio.Semaphore(value=1, *, loop=None)

   A Semaphore implementation.

   A semaphore manages an internal counter which is decremented by
   each "acquire()" call and incremented by each "release()" call. The
   counter can never go below zero; when "acquire()" finds that it is
   zero, it blocks, waiting until some other thread calls "release()".

   Semaphores also support the context manager protocol.

   The optional argument gives the initial value for the internal
   counter; it defaults to "1". If the value given is less than "0",
   "ValueError" is raised.

   acquire()

      Acquire a semaphore.

      If the internal counter is larger than zero on entry, decrement
      it by one and return "True" immediately.  If it is zero on
      entry, block, waiting until some other coroutine has called
      "release()" to make it larger than "0", and then return "True".

      This method is a *coroutine*.

   locked()

      Returns "True" if semaphore can not be acquired immediately.

   release()

      Release a semaphore, incrementing the internal counter by one.
      When it was zero on entry and another coroutine is waiting for
      it to become larger than zero again, wake up that coroutine.


BoundedSemaphore
----------------

class class asyncio.BoundedSemaphore(value=1, *, loop=None)

   A bounded semaphore implementation. Inherit from "Semaphore".

   This raises "ValueError" in "release()" if it would increase the
   value above the initial value.


Queues
======


Queue
-----

class class asyncio.Queue(maxsize=0, *, loop=None)

   A queue, useful for coordinating producer and consumer coroutines.

   If *maxsize* is less than or equal to zero, the queue size is
   infinite. If it is an integer greater than "0", then "yield from
   put()" will block when the queue reaches *maxsize*, until an item
   is removed by "get()".

   Unlike the standard library "queue", you can reliably know this
   Queue's size with "qsize()", since your single-threaded asyncio
   application won't be interrupted between calling "qsize()" and
   doing an operation on the Queue.

   empty()

      Return "True" if the queue is empty, "False" otherwise.

   full()

      Return "True" if there are maxsize items in the queue.

      Note: If the Queue was initialized with "maxsize=0" (the
        default), then "full()" is never "True".

   get()

      Remove and return an item from the queue.

      If you yield from "get()", wait until a item is available.

      This method is a *coroutine*.

   get_nowait()

      Remove and return an item from the queue.

      Return an item if one is immediately available, else raise
      "QueueEmpty".

   put(item)

      Put an item into the queue.

      If you yield from "put()", wait until a free slot is available
      before adding item.

      This method is a *coroutine*.

   put_nowait(item)

      Put an item into the queue without blocking.

      If no free slot is immediately available, raise "QueueFull".

   qsize()

      Number of items in the queue.

   maxsize

      Number of items allowed in the queue.


PriorityQueue
-------------

class class asyncio.PriorityQueue

   A subclass of "Queue"; retrieves entries in priority order (lowest
   first).

   Entries are typically tuples of the form: (priority number, data).


LifoQueue
---------

class class asyncio.LifoQueue

   A subclass of "Queue" that retrieves most recently added entries
   first.


JoinableQueue
-------------

class class asyncio.JoinableQueue

   A subclass of "Queue" with "task_done()" and "join()" methods.

   join()

      Block until all items in the queue have been gotten and
      processed.

      The count of unfinished tasks goes up whenever an item is added
      to the queue. The count goes down whenever a consumer thread
      calls "task_done()" to indicate that the item was retrieved and
      all work on it is complete.  When the count of unfinished tasks
      drops to zero, "join()" unblocks.

      This method is a *coroutine*.

   task_done()

      Indicate that a formerly enqueued task is complete.

      Used by queue consumers. For each "get()" used to fetch a task,
      a subsequent call to "task_done()" tells the queue that the
      processing on the task is complete.

      If a "join()" is currently blocking, it will resume when all
      items have been processed (meaning that a "task_done()" call was
      received for every item that had been "put()" into the queue).

      Raises "ValueError" if called more times than there were items
      placed in the queue.


Exceptions
----------

exception exception asyncio.QueueEmpty

   Exception raised when non-blocking "get()" (or "get_nowait()") is
   called on a "Queue" object which is empty.

exception exception asyncio.QueueFull

   Exception raised when non-blocking "put()" (or "put_nowait()") is
   called on a "Queue" object which is full.
