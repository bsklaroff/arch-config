
"inspect" --- Inspect live objects
**********************************

**Source code:** Lib/inspect.py

======================================================================

The "inspect" module provides several useful functions to help get
information about live objects such as modules, classes, methods,
functions, tracebacks, frame objects, and code objects.  For example,
it can help you examine the contents of a class, retrieve the source
code of a method, extract and format the argument list for a function,
or get all the information you need to display a detailed traceback.

There are four main kinds of services provided by this module: type
checking, getting source code, inspecting classes and functions, and
examining the interpreter stack.


Types and members
=================

The "getmembers()" function retrieves the members of an object such as
a class or module. The sixteen functions whose names begin with "is"
are mainly provided as convenient choices for the second argument to
"getmembers()". They also help you determine when you can expect to
find the following special attributes:

+-------------+-------------------+-----------------------------+
| Type        | Attribute         | Description                 |
+=============+===================+=============================+
| module      | __doc__           | documentation string        |
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
| class       | __doc__           | documentation string        |
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
| method      | __doc__           | documentation string        |
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
| function    | __doc__           | documentation string        |
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
| traceback   | tb_frame          | frame object at this level  |
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
| frame       | f_back            | next outer frame object     |
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
| code        | co_argcount       | number of arguments (not    |
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
| builtin     | __doc__           | documentation string        |
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+
+-------------+-------------------+-----------------------------+

inspect.getmembers(object[, predicate])

   Return all the members of an object in a list of (name, value)
   pairs sorted by name.  If the optional *predicate* argument is
   supplied, only members for which the predicate returns a true value
   are included.

   Note: "getmembers()" will only return class attributes defined in
     the metaclass when the argument is a class and those attributes
     have been listed in the metaclass' custom "__dir__()".

inspect.getmoduleinfo(path)

   Returns a *named tuple* "ModuleInfo(name, suffix, mode,
   module_type)" of values that describe how Python will interpret the
   file identified by *path* if it is a module, or "None" if it would
   not be identified as a module.  In that tuple, *name* is the name
   of the module without the name of any enclosing package, *suffix*
   is the trailing part of the file name (which may not be a dot-
   delimited extension), *mode* is the "open()" mode that would be
   used ("'r'" or "'rb'"), and *module_type* is an integer giving the
   type of the module.  *module_type* will have a value which can be
   compared to the constants defined in the "imp" module; see the
   documentation for that module for more information on module types.

   Deprecated since version 3.3: You may check the file path's suffix
   against the supported suffixes listed in "importlib.machinery" to
   infer the same information.

inspect.getmodulename(path)

   Return the name of the module named by the file *path*, without
   including the names of enclosing packages. The file extension is
   checked against all of the entries in
   "importlib.machinery.all_suffixes()". If it matches, the final path
   component is returned with the extension removed. Otherwise, "None"
   is returned.

   Note that this function *only* returns a meaningful name for actual
   Python modules - paths that potentially refer to Python packages
   will still return "None".

   Changed in version 3.3: This function is now based directly on
   "importlib" rather than the deprecated "getmoduleinfo()".

inspect.ismodule(object)

   Return true if the object is a module.

inspect.isclass(object)

   Return true if the object is a class, whether built-in or created
   in Python code.

inspect.ismethod(object)

   Return true if the object is a bound method written in Python.

inspect.isfunction(object)

   Return true if the object is a Python function, which includes
   functions created by a *lambda* expression.

inspect.isgeneratorfunction(object)

   Return true if the object is a Python generator function.

inspect.isgenerator(object)

   Return true if the object is a generator.

inspect.istraceback(object)

   Return true if the object is a traceback.

inspect.isframe(object)

   Return true if the object is a frame.

inspect.iscode(object)

   Return true if the object is a code.

inspect.isbuiltin(object)

   Return true if the object is a built-in function or a bound built-
   in method.

inspect.isroutine(object)

   Return true if the object is a user-defined or built-in function or
   method.

inspect.isabstract(object)

   Return true if the object is an abstract base class.

inspect.ismethoddescriptor(object)

   Return true if the object is a method descriptor, but not if
   "ismethod()", "isclass()", "isfunction()" or "isbuiltin()" are
   true.

   This, for example, is true of "int.__add__".  An object passing
   this test has a "__get__" attribute but not a "__set__" attribute,
   but beyond that the set of attributes varies.  "__name__" is
   usually sensible, and "__doc__" often is.

   Methods implemented via descriptors that also pass one of the other
   tests return false from the "ismethoddescriptor()" test, simply
   because the other tests promise more -- you can, e.g., count on
   having the "__func__" attribute (etc) when an object passes
   "ismethod()".

inspect.isdatadescriptor(object)

   Return true if the object is a data descriptor.

   Data descriptors have both a "__get__" and a "__set__" attribute.
   Examples are properties (defined in Python), getsets, and members.
   The latter two are defined in C and there are more specific tests
   available for those types, which is robust across Python
   implementations.  Typically, data descriptors will also have
   "__name__" and "__doc__" attributes (properties, getsets, and
   members have both of these attributes), but this is not guaranteed.

inspect.isgetsetdescriptor(object)

   Return true if the object is a getset descriptor.

   **CPython implementation detail:** getsets are attributes defined
   in extension modules via "PyGetSetDef" structures.  For Python
   implementations without such types, this method will always return
   "False".

inspect.ismemberdescriptor(object)

   Return true if the object is a member descriptor.

   **CPython implementation detail:** Member descriptors are
   attributes defined in extension modules via "PyMemberDef"
   structures.  For Python implementations without such types, this
   method will always return "False".


Retrieving source code
======================

inspect.getdoc(object)

   Get the documentation string for an object, cleaned up with
   "cleandoc()".

inspect.getcomments(object)

   Return in a single string any lines of comments immediately
   preceding the object's source code (for a class, function, or
   method), or at the top of the Python source file (if the object is
   a module).

inspect.getfile(object)

   Return the name of the (text or binary) file in which an object was
   defined. This will fail with a "TypeError" if the object is a
   built-in module, class, or function.

inspect.getmodule(object)

   Try to guess which module an object was defined in.

inspect.getsourcefile(object)

   Return the name of the Python source file in which an object was
   defined.  This will fail with a "TypeError" if the object is a
   built-in module, class, or function.

inspect.getsourcelines(object)

   Return a list of source lines and starting line number for an
   object. The argument may be a module, class, method, function,
   traceback, frame, or code object.  The source code is returned as a
   list of the lines corresponding to the object and the line number
   indicates where in the original source file the first line of code
   was found.  An "OSError" is raised if the source code cannot be
   retrieved.

   Changed in version 3.3: "OSError" is raised instead of "IOError",
   now an alias of the former.

inspect.getsource(object)

   Return the text of the source code for an object. The argument may
   be a module, class, method, function, traceback, frame, or code
   object.  The source code is returned as a single string.  An
   "OSError" is raised if the source code cannot be retrieved.

   Changed in version 3.3: "OSError" is raised instead of "IOError",
   now an alias of the former.

inspect.cleandoc(doc)

   Clean up indentation from docstrings that are indented to line up
   with blocks of code.  Any whitespace that can be uniformly removed
   from the second line onwards is removed.  Also, all tabs are
   expanded to spaces.


Introspecting callables with the Signature object
=================================================

New in version 3.3.

The Signature object represents the call signature of a callable
object and its return annotation.  To retrieve a Signature object, use
the "signature()" function.

inspect.signature(callable)

   Return a "Signature" object for the given "callable":

      >>> from inspect import signature
      >>> def foo(a, *, b:int, **kwargs):
      ...     pass

      >>> sig = signature(foo)

      >>> str(sig)
      '(a, *, b:int, **kwargs)'

      >>> str(sig.parameters['b'])
      'b:int'

      >>> sig.parameters['b'].annotation
      <class 'int'>

   Accepts a wide range of python callables, from plain functions and
   classes to "functools.partial()" objects.

   Raises "ValueError" if no signature can be provided, and
   "TypeError" if that type of object is not supported.

   Note: Some callables may not be introspectable in certain
     implementations of Python.  For example, in CPython, some built-
     in functions defined in C provide no metadata about their
     arguments.

class class inspect.Signature(parameters=None, *, return_annotation=Signature.empty)

   A Signature object represents the call signature of a function and
   its return annotation.  For each parameter accepted by the function
   it stores a "Parameter" object in its "parameters" collection.

   The optional *parameters* argument is a sequence of "Parameter"
   objects, which is validated to check that there are no parameters
   with duplicate names, and that the parameters are in the right
   order, i.e. positional-only first, then positional-or-keyword, and
   that parameters with defaults follow parameters without defaults.

   The optional *return_annotation* argument, can be an arbitrary
   Python object, is the "return" annotation of the callable.

   Signature objects are *immutable*.  Use "Signature.replace()" to
   make a modified copy.

   empty

      A special class-level marker to specify absence of a return
      annotation.

   parameters

      An ordered mapping of parameters' names to the corresponding
      "Parameter" objects.

   return_annotation

      The "return" annotation for the callable.  If the callable has
      no "return" annotation, this attribute is set to
      "Signature.empty".

   bind(*args, **kwargs)

      Create a mapping from positional and keyword arguments to
      parameters. Returns "BoundArguments" if "*args" and "**kwargs"
      match the signature, or raises a "TypeError".

   bind_partial(*args, **kwargs)

      Works the same way as "Signature.bind()", but allows the
      omission of some required arguments (mimics
      "functools.partial()" behavior.) Returns "BoundArguments", or
      raises a "TypeError" if the passed arguments do not match the
      signature.

   replace(*[, parameters][, return_annotation])

      Create a new Signature instance based on the instance replace
      was invoked on.  It is possible to pass different "parameters"
      and/or "return_annotation" to override the corresponding
      properties of the base signature.  To remove return_annotation
      from the copied Signature, pass in "Signature.empty".

         >>> def test(a, b):
         ...     pass
         >>> sig = signature(test)
         >>> new_sig = sig.replace(return_annotation="new return anno")
         >>> str(new_sig)
         "(a, b) -> 'new return anno'"

class class inspect.Parameter(name, kind, *, default=Parameter.empty, annotation=Parameter.empty)

   Parameter objects are *immutable*.  Instead of modifying a
   Parameter object, you can use "Parameter.replace()" to create a
   modified copy.

   empty

      A special class-level marker to specify absence of default
      values and annotations.

   name

      The name of the parameter as a string.  The name must be a valid
      Python identifier.

   default

      The default value for the parameter.  If the parameter has no
      default value, this attribute is set to "Parameter.empty".

   annotation

      The annotation for the parameter.  If the parameter has no
      annotation, this attribute is set to "Parameter.empty".

   kind

      Describes how argument values are bound to the parameter.
      Possible values (accessible via "Parameter", like
      "Parameter.KEYWORD_ONLY"):

      +--------------------------+------------------------------------------------+
      | Name                     | Meaning                                        |
      +==========================+================================================+
      | *POSITIONAL_ONLY*        | Value must be supplied as a positional         |
      +--------------------------+------------------------------------------------+
      | *POSITIONAL_OR_KEYWORD*  | Value may be supplied as either a keyword or   |
      +--------------------------+------------------------------------------------+
      | *VAR_POSITIONAL*         | A tuple of positional arguments that aren't    |
      +--------------------------+------------------------------------------------+
      | *KEYWORD_ONLY*           | Value must be supplied as a keyword argument.  |
      +--------------------------+------------------------------------------------+
      | *VAR_KEYWORD*            | A dict of keyword arguments that aren't bound  |
      +--------------------------+------------------------------------------------+

      Example: print all keyword-only arguments without default
      values:

         >>> def foo(a, b, *, c, d=10):
         ...     pass

         >>> sig = signature(foo)
         >>> for param in sig.parameters.values():
         ...     if (param.kind == param.KEYWORD_ONLY and
         ...                        param.default is param.empty):
         ...         print('Parameter:', param)
         Parameter: c

   replace(*[, name][, kind][, default][, annotation])

         Create a new Parameter instance based on the instance
         replaced was invoked on.  To override a "Parameter"
         attribute, pass the corresponding argument.  To remove a
         default value or/and an annotation from a Parameter, pass
         "Parameter.empty".

            >>> from inspect import Parameter
            >>> param = Parameter('foo', Parameter.KEYWORD_ONLY, default=42)
            >>> str(param)
            'foo=42'

            >>> str(param.replace()) # Will create a shallow copy of 'param'
            'foo=42'

            >>> str(param.replace(default=Parameter.empty, annotation='spam'))
            "foo:'spam'"

      Changed in version 3.4: In Python 3.3 Parameter objects were
      allowed to have "name" set to "None" if their "kind" was set to
      "POSITIONAL_ONLY". This is no longer permitted.

class class inspect.BoundArguments

   Result of a "Signature.bind()" or "Signature.bind_partial()" call.
   Holds the mapping of arguments to the function's parameters.

   arguments

      An ordered, mutable mapping ("collections.OrderedDict") of
      parameters' names to arguments' values.  Contains only
      explicitly bound arguments.  Changes in "arguments" will reflect
      in "args" and "kwargs".

      Should be used in conjunction with "Signature.parameters" for
      any argument processing purposes.

      Note: Arguments for which "Signature.bind()" or
        "Signature.bind_partial()" relied on a default value are
        skipped. However, if needed, it is easy to include them.

         >>> def foo(a, b=10):
         ...     pass

         >>> sig = signature(foo)
         >>> ba = sig.bind(5)

         >>> ba.args, ba.kwargs
         ((5,), {})

         >>> for param in sig.parameters.values():
         ...     if param.name not in ba.arguments:
         ...         ba.arguments[param.name] = param.default

         >>> ba.args, ba.kwargs
         ((5, 10), {})

   args

      A tuple of positional arguments values.  Dynamically computed
      from the "arguments" attribute.

   kwargs

      A dict of keyword arguments values.  Dynamically computed from
      the "arguments" attribute.

   The "args" and "kwargs" properties can be used to invoke functions:

      def test(a, *, b):
         ...

      sig = signature(test)
      ba = sig.bind(10, b=20)
      test(*ba.args, **ba.kwargs)

See also: **PEP 362** - Function Signature Object.

     The detailed specification, implementation details and examples.


Classes and functions
=====================

inspect.getclasstree(classes, unique=False)

   Arrange the given list of classes into a hierarchy of nested lists.
   Where a nested list appears, it contains classes derived from the
   class whose entry immediately precedes the list.  Each entry is a
   2-tuple containing a class and a tuple of its base classes.  If the
   *unique* argument is true, exactly one entry appears in the
   returned structure for each class in the given list.  Otherwise,
   classes using multiple inheritance and their descendants will
   appear multiple times.

inspect.getargspec(func)

   Get the names and default values of a Python function's arguments.
   A *named tuple* "ArgSpec(args, varargs, keywords, defaults)" is
   returned. *args* is a list of the argument names. *varargs* and
   *keywords* are the names of the "*" and "**" arguments or "None".
   *defaults* is a tuple of default argument values or "None" if there
   are no default arguments; if this tuple has *n* elements, they
   correspond to the last *n* elements listed in *args*.

   Deprecated since version 3.0: Use "getfullargspec()" instead, which
   provides information about keyword-only arguments and annotations.

inspect.getfullargspec(func)

   Get the names and default values of a Python function's arguments.
   A *named tuple* is returned:

   "FullArgSpec(args, varargs, varkw, defaults, kwonlyargs,
   kwonlydefaults, annotations)"

   *args* is a list of the argument names.  *varargs* and *varkw* are
   the names of the "*" and "**" arguments or "None".  *defaults* is
   an *n*-tuple of the default values of the last *n* arguments, or
   "None" if there are no default arguments.  *kwonlyargs* is a list
   of keyword-only argument names.  *kwonlydefaults* is a dictionary
   mapping names from kwonlyargs to defaults.  *annotations* is a
   dictionary mapping argument names to annotations.

   The first four items in the tuple correspond to "getargspec()".

   Note: Consider using the new *Signature Object* interface, which
     provides a better way of introspecting functions.

   Changed in version 3.4: This function is now based on
   "signature()", but still ignores "__wrapped__" attributes and
   includes the already bound first parameter in the signature output
   for bound methods.

inspect.getargvalues(frame)

   Get information about arguments passed into a particular frame.  A
   *named tuple* "ArgInfo(args, varargs, keywords, locals)" is
   returned. *args* is a list of the argument names.  *varargs* and
   *keywords* are the names of the "*" and "**" arguments or "None".
   *locals* is the locals dictionary of the given frame.

inspect.formatargspec(args[, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations[, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns, formatannotations]])

   Format a pretty argument spec from the values returned by
   "getargspec()" or "getfullargspec()".

   The first seven arguments are ("args", "varargs", "varkw",
   "defaults", "kwonlyargs", "kwonlydefaults", "annotations"). The
   other five arguments are the corresponding optional formatting
   functions that are called to turn names and values into strings.
   The last argument is an optional function to format the sequence of
   arguments. For example:

      >>> from inspect import formatargspec, getfullargspec
      >>> def f(a: int, b: float):
      ...     pass
      ...
      >>> formatargspec(*getfullargspec(f))
      '(a: int, b: float)'

inspect.formatargvalues(args[, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue])

   Format a pretty argument spec from the four values returned by
   "getargvalues()".  The format* arguments are the corresponding
   optional formatting functions that are called to turn names and
   values into strings.

inspect.getmro(cls)

   Return a tuple of class cls's base classes, including cls, in
   method resolution order.  No class appears more than once in this
   tuple. Note that the method resolution order depends on cls's type.
   Unless a very peculiar user-defined metatype is in use, cls will be
   the first element of the tuple.

inspect.getcallargs(func, *args, **kwds)

   Bind the *args* and *kwds* to the argument names of the Python
   function or method *func*, as if it was called with them. For bound
   methods, bind also the first argument (typically named "self") to
   the associated instance. A dict is returned, mapping the argument
   names (including the names of the "*" and "**" arguments, if any)
   to their values from *args* and *kwds*. In case of invoking *func*
   incorrectly, i.e. whenever "func(*args, **kwds)" would raise an
   exception because of incompatible signature, an exception of the
   same type and the same or similar message is raised. For example:

      >>> from inspect import getcallargs
      >>> def f(a, b=1, *pos, **named):
      ...     pass
      >>> getcallargs(f, 1, 2, 3) == {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}
      True
      >>> getcallargs(f, a=2, x=4) == {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': ()}
      True
      >>> getcallargs(f)
      Traceback (most recent call last):
      ...
      TypeError: f() missing 1 required positional argument: 'a'

   New in version 3.2.

   Note: Consider using the new "Signature.bind()" instead.

inspect.getclosurevars(func)

   Get the mapping of external name references in a Python function or
   method *func* to their current values. A *named tuple*
   "ClosureVars(nonlocals, globals, builtins, unbound)" is returned.
   *nonlocals* maps referenced names to lexical closure variables,
   *globals* to the function's module globals and *builtins* to the
   builtins visible from the function body. *unbound* is the set of
   names referenced in the function that could not be resolved at all
   given the current module globals and builtins.

   "TypeError" is raised if *func* is not a Python function or method.

   New in version 3.3.

inspect.unwrap(func, *, stop=None)

   Get the object wrapped by *func*. It follows the chain of
   "__wrapped__" attributes returning the last object in the chain.

   *stop* is an optional callback accepting an object in the wrapper
   chain as its sole argument that allows the unwrapping to be
   terminated early if the callback returns a true value. If the
   callback never returns a true value, the last object in the chain
   is returned as usual. For example, "signature()" uses this to stop
   unwrapping if any object in the chain has a "__signature__"
   attribute defined.

   "ValueError" is raised if a cycle is encountered.

   New in version 3.4.


The interpreter stack
=====================

When the following functions return "frame records," each record is a
tuple of six items: the frame object, the filename, the line number of
the current line, the function name, a list of lines of context from
the source code, and the index of the current line within that list.

Note: Keeping references to frame objects, as found in the first
  element of the frame records these functions return, can cause your
  program to create reference cycles.  Once a reference cycle has been
  created, the lifespan of all objects which can be accessed from the
  objects which form the cycle can become much longer even if Python's
  optional cycle detector is enabled.  If such cycles must be created,
  it is important to ensure they are explicitly broken to avoid the
  delayed destruction of objects and increased memory consumption
  which occurs.Though the cycle detector will catch these, destruction
  of the frames (and local variables) can be made deterministic by
  removing the cycle in a "finally" clause.  This is also important if
  the cycle detector was disabled when Python was compiled or using
  "gc.disable()".  For example:

     def handle_stackframe_without_leak():
         frame = inspect.currentframe()
         try:
             # do something with the frame
         finally:
             del frame

  If you want to keep the frame around (for example to print a
  traceback later), you can also break reference cycles by using the
  "frame.clear()" method.

The optional *context* argument supported by most of these functions
specifies the number of lines of context to return, which are centered
around the current line.

inspect.getframeinfo(frame, context=1)

   Get information about a frame or traceback object.  A *named tuple*
   "Traceback(filename, lineno, function, code_context, index)" is
   returned.

inspect.getouterframes(frame, context=1)

   Get a list of frame records for a frame and all outer frames.
   These frames represent the calls that lead to the creation of
   *frame*. The first entry in the returned list represents *frame*;
   the last entry represents the outermost call on *frame*'s stack.

inspect.getinnerframes(traceback, context=1)

   Get a list of frame records for a traceback's frame and all inner
   frames.  These frames represent calls made as a consequence of
   *frame*.  The first entry in the list represents *traceback*; the
   last entry represents where the exception was raised.

inspect.currentframe()

   Return the frame object for the caller's stack frame.

   **CPython implementation detail:** This function relies on Python
   stack frame support in the interpreter, which isn't guaranteed to
   exist in all implementations of Python.  If running in an
   implementation without Python stack frame support this function
   returns "None".

inspect.stack(context=1)

   Return a list of frame records for the caller's stack.  The first
   entry in the returned list represents the caller; the last entry
   represents the outermost call on the stack.

inspect.trace(context=1)

   Return a list of frame records for the stack between the current
   frame and the frame in which an exception currently being handled
   was raised in.  The first entry in the list represents the caller;
   the last entry represents where the exception was raised.


Fetching attributes statically
==============================

Both "getattr()" and "hasattr()" can trigger code execution when
fetching or checking for the existence of attributes. Descriptors,
like properties, will be invoked and "__getattr__()" and
"__getattribute__()" may be called.

For cases where you want passive introspection, like documentation
tools, this can be inconvenient. "getattr_static()" has the same
signature as "getattr()" but avoids executing code when it fetches
attributes.

inspect.getattr_static(obj, attr, default=None)

   Retrieve attributes without triggering dynamic lookup via the
   descriptor protocol, "__getattr__()" or "__getattribute__()".

   Note: this function may not be able to retrieve all attributes that
   getattr can fetch (like dynamically created attributes) and may
   find attributes that getattr can't (like descriptors that raise
   AttributeError). It can also return descriptors objects instead of
   instance members.

   If the instance "__dict__" is shadowed by another member (for
   example a property) then this function will be unable to find
   instance members.

   New in version 3.2.

"getattr_static()" does not resolve descriptors, for example slot
descriptors or getset descriptors on objects implemented in C. The
descriptor object is returned instead of the underlying attribute.

You can handle these with code like the following. Note that for
arbitrary getset descriptors invoking these may trigger code
execution:

   # example code for resolving the builtin descriptor types
   class _foo:
       __slots__ = ['foo']

   slot_descriptor = type(_foo.foo)
   getset_descriptor = type(type(open(__file__)).name)
   wrapper_descriptor = type(str.__dict__['__add__'])
   descriptor_types = (slot_descriptor, getset_descriptor, wrapper_descriptor)

   result = getattr_static(some_object, 'foo')
   if type(result) in descriptor_types:
       try:
           result = result.__get__()
       except AttributeError:
           # descriptors can raise AttributeError to
           # indicate there is no underlying value
           # in which case the descriptor itself will
           # have to do
           pass


Current State of a Generator
============================

When implementing coroutine schedulers and for other advanced uses of
generators, it is useful to determine whether a generator is currently
executing, is waiting to start or resume or execution, or has already
terminated. "getgeneratorstate()" allows the current state of a
generator to be determined easily.

inspect.getgeneratorstate(generator)

   Get current state of a generator-iterator.

   Possible states are:
      * GEN_CREATED: Waiting to start execution.

      * GEN_RUNNING: Currently being executed by the interpreter.

      * GEN_SUSPENDED: Currently suspended at a yield expression.

      * GEN_CLOSED: Execution has completed.

   New in version 3.2.

The current internal state of the generator can also be queried. This
is mostly useful for testing purposes, to ensure that internal state
is being updated as expected:

inspect.getgeneratorlocals(generator)

   Get the mapping of live local variables in *generator* to their
   current values.  A dictionary is returned that maps from variable
   names to values. This is the equivalent of calling "locals()" in
   the body of the generator, and all the same caveats apply.

   If *generator* is a *generator* with no currently associated frame,
   then an empty dictionary is returned.  "TypeError" is raised if
   *generator* is not a Python generator object.

   **CPython implementation detail:** This function relies on the
   generator exposing a Python stack frame for introspection, which
   isn't guaranteed to be the case in all implementations of Python.
   In such cases, this function will always return an empty
   dictionary.

   New in version 3.3.


Command Line Interface
======================

The "inspect" module also provides a basic introspection capability
from the command line.

By default, accepts the name of a module and prints the source of that
module. A class or function within the module can be printed instead
by appended a colon and the qualified name of the target object.

--details

   Print information about the specified object rather than the source
   code
