{"name":"toggle","type":"method","title":".toggle()","deprecated":"1.8","removed":"1.9","desc":"Bind two or more handlers to the matched elements, to be executed on alternate clicks.","categories":["events/mouse-events","version/1.0","deprecated/deprecated-1.8","removed"],"entries":[{"return":"jQuery","signatures":{"added":"1.0","argument":[{"desc":"A function to execute every even time the element is clicked.","name":"handler(eventObject)","type":"Function"},{"desc":"A function to execute every odd time the element is clicked.","name":"handler(eventObject)","type":"Function"},{"desc":"Additional handlers to cycle through after clicks.","name":"handler(eventObject)","optional":"true","type":"Function"}]},"examples":{"desc":"Toggle a style on table cells. (Not recommended. Use .toggleClass() instead.):","code":"\n$( \"td\" ).toggle(\n  function() {\n    $( this ).addClass( \"selected\" );\n  }, function() {\n    $( this ).removeClass( \"selected\" );\n  }\n);\n"},"longdesc":"\n    <div class=\"warning\">\n      <p>Note: This method signature was deprecated in jQuery 1.8 and removed in jQuery 1.9. jQuery also provides an animation method named <a href=\"/toggle/\">.toggle()</a> that toggles the visibility of elements. Whether the animation or the event method is fired depends on the set of arguments passed.</p>\n    </div>\n    <p>The <code>.toggle()</code> method binds a handler for the <code>click</code> event, so the rules outlined for the triggering of <code>click</code> apply here as well.</p>\n    <p>For example, consider the HTML:</p>\n    <pre><code>\n&lt;div id=\"target\"&gt;\n  Click here\n&lt;/div&gt;\n    </code></pre>\n    <p>Event handlers can then be bound to the <code>&lt;div&gt;</code>:</p>\n    <pre><code>\n$( \"#target\" ).toggle(function() {\n  alert( \"First handler for .toggle() called.\" );\n}, function() {\n  alert( \"Second handler for .toggle() called.\" );\n});\n    </code></pre>\n    <p>As the element is clicked repeatedly, the messages alternate:</p>\n    <p>\n      <samp>First handler for .toggle() called.</samp>\n      <br/>\n      <samp>Second handler for .toggle() called.</samp>\n      <br/>\n      <samp>First handler for .toggle() called.</samp>\n      <br/>\n      <samp>Second handler for .toggle() called.</samp>\n      <br/>\n      <samp>First handler for .toggle() called.</samp>\n    </p>\n    <p>If more than two handlers are provided, <code>.toggle()</code> will cycle among all of them. For example, if there are three handlers, then the first handler will be called on the first click, the fourth click, the seventh click, and so on.</p>\n    <p>The <code>.toggle()</code> method is provided for convenience. It is relatively straightforward to implement the same behavior by hand, and this can be necessary if the assumptions built into <code>.toggle()</code> prove limiting. For example, <code>.toggle()</code> is not guaranteed to work correctly if applied twice to the same element. Since <code>.toggle()</code> internally uses a <code>click</code> handler to do its work, we must unbind <code>click</code> to remove a behavior attached with <code>.toggle()</code>, so other <code>click</code> handlers can be caught in the crossfire. The implementation also calls <code>.preventDefault()</code> on the event, so links will not be followed and buttons will not be clicked if <code>.toggle()</code> has been called on the element.</p>\n  "}],"slug":"toggle-event"}